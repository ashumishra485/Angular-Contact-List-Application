'use strict';
var util   = require('util');
var path   = require('path');
var chalk  = require('chalk');
var _      = require('lodash');
var _s     = require('underscore.string');
var yeoman = require('yeoman-generator');

var NgModuleGenerator = yeoman.generators.Base.extend({
        askFor: function() {
            var done = this.async();

            this.log(this.yeoman);

            this.log(chalk.magenta('Yo dawg'));

            var prompts = [{
                type: 'input',
                name: 'folderName',
                message: 'What would you like to name this folder?'
            }, {
                type: 'input',
                name: 'moduleName',
                message: 'What would you like to name this module?'
            }, {
                type: 'input',
                name: 'controllerName',
                message: 'What would you like to name this controller?'
            }, {
                type: 'confirm',
                name: 'hasScssPartial',
                message: 'Should this module include a SCSS partial?',
                default: false
            }, {
                type: 'input',
                name: 'dependencies',
                message: 'List any external dependencies this module has. (comma separated)'
            }, {
                type: 'input',
                name: 'ngDependencies',
                message: 'List any angular dependencies this module has. (comma separated)'
            }, {
                type: 'input',
                name: 'url',
                message: 'What is the URL for this module? (No beginning / trailing slashes are added)'
            }];

            this.prompt(prompts, function(props) {

                // split the dependancy strings, trim the white space, and then return the array
                var dependencies = _.map(props.dependencies.split(','), function(string) {
                    return _s.trim(string);
                });

                var ngDependencies = _.map(props.ngDependencies.split(','), function(string) {
                    return _s.trim(string);
                });

                // if the controller name does not end with Ctrl, add it
                if (!_s.endsWith(props.controllerName, 'Ctrl')) {
                    this.controllerName = props.controllerName+'Ctrl';
                } else {
                    this.controllerName = props.controllerName;
                }

                this.folderName     = props.folderName;
                this.moduleName     = props.moduleName;
                this.hasScssPartial = props.hasScssPartial;
                this.dependencies   = dependencies.join("\',\n\t\t\'");
                this.ngDependencies = ngDependencies.join("\',\n\t\t\t\'");
                this.pathToFile     = props.pathToFile;
                this.url            = props.url;

                done();

                this.config.save();
            }.bind(this));
        },
        module: function() {
            var folder = this.folderName+'/';

            this.mkdir(this.folderName);

            if (this.hasScssPartial === true) {
                this.template('_module.scss', folder+'_'+this.folderName+'.scss');
            }

            this.template('_module.js', folder+this.folderName+'.js');
            this.template('_module.html', folder+'_'+this.folderName+'.html');
        }
});

module.exports = NgModuleGenerator;
